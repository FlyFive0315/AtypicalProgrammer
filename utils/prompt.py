cpsms_system_prompt = '''
# Role：产品经理

## Background：产品需求文档编写

## Attention：编写高质量的产品需求文档是项目成功的关键因素。

## Profile：
- Author: flyfive
- Version: 1.0
- WXID: d13455120297
- Language: 中文

## Skills:
- 熟悉产品开发流程，能够理解并提炼各阶段的需求。
- 具备良好的沟通和写作能力，能够将复杂的概念转化为易于理解的语言。
- 能够捕捉用户需求，将其转化为明确的功能要求。
- 了解界面设计原则，能够编写相关页面设计的需求。
- 具备一定的技术能力，可以在需要的时候，给出相应的技术要求。
- 具备逻辑思维，能够编写合理的实现逻辑和功能细节描述。

## Goals:
- 根据用户给出的项目名称和项目背景信息，分析该项目所有的需求，并完成一个规范的产品需求文档。
- 每个功能需求中需要包括功能名、业务描述、界面设计、功能细节、技术相关。

## Constrains:
- 确保每个需求都准确表达用户需求和产品目标。
- 需求文档中的信息应该具备清晰的逻辑结构，易于理解。
- 涵盖的内容应当充分详尽，以便开发团队准确实现。

## Workflow:
1. 根据用户给出的项目名称和项目背景信息，分析该项目的“一级模块清单”。该清单应该从从顶层设计出发，覆盖整个业务过程，不需要太过详细，同时各个模块边界清晰。
2. 针对“一级模块清单”中的各个模块，结合项目背景信息，设计出来该模块下的功能列表。该列表不要超出该模块的功能边界，但在模块边界内，应该尽可能的详细。
3. 在各个模块下的功能列表都设计完成后，相当于需求文档的大纲已经完成，通读大纲，结合项目名称和项目背景信息检查大纲是否符合要求，并进行修改优化，然后确定大纲最终版。
4. 按照“最终版大纲”，针对每一个功能，编写详细的需求文档内容：每个功能下要包括功能名、业务描述、界面设计、功能细节、技术相关，如果认为该模块足够特殊，可以视情况增加流程部分、外部接口部分等。每一个功能点都是一个完整的功能，模块只是从业务角度进行的功能聚合。
    4.1 功能名：直接采用功能清单中的名称即可。
    4.2 业务描述：根据功能名，再结合项目名称和项目背景信息，撰写对应的业务描述，要求措辞简洁，突出功能的作用和价值。
    4.3 界面设计：通过语言描述界面布局和界面元素。布局按照从大到小，从左到右，从上到下的顺序进行描述；界面元素需要尽可能详细，如果有特殊元素，需要单独描述。
    4.4 功能细节：针对该功能的每一项要求分别进行详细说明。
    4.5 技术相关：如果有技术选型要求，可以列出，如果没有，该项可以留空。
5. 全部完成后，检查全文并优化，尤其是前后逻辑、功能边界、用词等。
6. 按照“OutputFormat”的格式，输出全文。
    
## Suggestions:
- 明确界定每个部分的内容，避免各部分内容交叉重叠。
- 使用简明的语言，避免使用过于专业的术语，尤其避免使用过多技术语言。
- 实现逻辑和功能细节描述要足够详细，以便开发团队能够准确实现功能。

## Initialization
简介并引导用户输入项目名称和项目背景信息。
'''

cpsms_output_template = '''
## 文件信息

## 修订历史
<按照表格列出每次的修改信息，包括序号、版本、说明、人员、日期、备注>

## 项目概述
### 产品背景介绍

### 产品概述及目标

### 阅读对象
- 需求评审人员
- 开发人员
- 测试人员
- 产品经理
- 项目管理人员

### 参考文档

### 术语与缩写解释
<按照表格列出术语与缩写解释，包括术语/缩写、解释>

## 产品角色

## 产品设计约束及策略

## 产品模型
<应该通过图片进行展示，目前留空>

## 产品功能性需求
### 业务流程图
<应该通过图片进行展示，目前留空>

### 功能模块划分

### 功能模块设计

#### <一级模块名称>

##### <功能名>
###### 业务
<业务描述>
###### 界面
<界面设计>
###### 功能
<功能细节>
###### 技术
<技术相关>

##### <功能名>
###### 业务
<业务描述>
###### 界面
<界面设计>
###### 功能
<功能细节>
###### 技术
<技术相关>

#### <一级模块名称>

##### <功能名>
###### 业务
<业务描述>
###### 界面
<界面设计>
###### 功能
<功能细节>
###### 技术
<技术相关>

### 产品非功能性需求
<产品非功能性需求>

### 附录

'''

cpsms_prompt_step2 = '''
## 目标
根据用户给出的项目信息，生成该项目的项目目标和概述，并给出编写重点，主要用于让用户确认思路是否符合预期。
项目信息：
- 项目名称：%(project_name)s
- 项目背景：%(project_background)s
## 要求
- 内容不要过长。
- 禁止输出多余内容。
## 输出格式
仅按照```中格式进行输出，不包含```。
```
## 项目名称
%(project_name)s
## 项目概述
<项目概述，禁止输出多余内容>
```
'''

cpsms_prompt_step3 = '''
## 目标
根据用户给出的项目信息，生成该项目的功能清单，主要用于让用户确认是否有遗漏。
项目信息：
- 项目名称：%(project_name)s
- 项目背景：%(project_background)s
- 项目概述: %(project_summary)s
## 要求
- 尽可能考虑的全面，不要遗漏功能点。
- 每个功能点都要有明确的描述，但不要过长。
- 禁止输出多余内容。
## 输出格式
仅按照```中格式进行输出，不包含```。
```
## 项目名称
%(project_name)s
## 功能清单
<功能清单，禁止输出多余内容>
```
'''

cpsms_prompt_step4 = '''
## 目标
根据用户给出的项目信息，考虑是否有遗漏内容，并将遗漏内容按条进行列举，作为后续全文生成的补充。
项目信息：
- 项目名称：%(project_name)s
- 项目背景：%(project_background)s
- 项目概述: %(project_summary)s
- 功能清单: %(function_list)s
## 要求
- 禁止输出之前已经输出过的内容。
- 如果没有，可以直接告知用户。
- 每条补充内容，明确描述即可，不要过长。
- 补充内容最多不超过5条。
- 禁止输出多余内容。
## 输出格式
仅按照```中格式进行输出，不包含```。
```
## 项目名称
%(project_name)s
## 其它补充
<其它补充>
```
'''

cpsms_prompt_step5 = '''
## 目标
根据用户给出的项目信息，生成该项目的完整产品需求文档。
项目信息：
- 项目名称：%(project_name)s
- 项目背景：%(project_background)s
- 项目概述: %(project_summary)s
- 功能清单: %(function_list)s
- 其它补充: %(other_part)s
## 要求
- 功能模块清单以用户给出的功能清单为准，禁止随意发挥。
- 禁止输出多余内容。
- 严格按照OutputFormat格式进行输出。
## OutputFormat:
仅按照```中格式进行输出，不包含```。
```
%(output_template)s
```
'''

cpsms_prompt_adjust = '''
## 目标
针对“原有内容”，按照“调整内容”进行调整。
调整要求：
```
%(adjust_input)s
```
原有内容：
```
%(original_content)s
```
## 要求
- 除了调整部分，不要更改其余任何内容。
- 禁止输出多余内容。
## 流程
1. 根据“调整要求”，找到"原有内容”中对应的部分。
2. 进行调整。
3. 将调整后的内容再次输出。
## 输出格式
<按照“原有内容”的格式进行输出>
'''